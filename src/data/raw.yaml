keyword-categories: [tools, techenvironment, technologies, environment]
cv:
  jobs:
    - 
      name: Systems in Motion
      positions:
        -
          time: [May 2013 - October 2013]
          title: Jr. Java Developer
          unofficaltitle: Software Developer
          projects:
            - 
              name: Management Plugin for Jira-Greenhopper
              client: Monsanto
              time: [May 2013, June 2013]
              tools: [Eclipse, Vim, Sublime Text, maven, git]
              technologies: [Java, HttpServlets, Jquery, lodash, Backbone.js, MySql, Bootstrap, CSS]
              techenvironment: [Windows, Tomcat, REST, Thickclient]
              environment: [agile, team]
              description: >
                Small Jira-Greenhopper plugin for Monsanto, to interface with
                other Monsanto systems and allow managers to better visualize and
                manage resources. 
              start: >
                Started project from a loose set of requirements, with no existing infrastructure or experience
              responsiblefor: 
                - Creating + designing thickclient front end using Backbone.js
                - Communicating with team members and actively contributed to design
                - Reviewing team members' work
                - Combining team members' work into final project
                - Maintaining post project completion
              end: >
                Released project to customer and was moved onto the next project
            - 
              name: Travelflex
              client: Systems in Motion
              time: [June 2013, August 2013]
              technologies: [Java, Spring, Hibernate, Jquery, CSS, Quartz]
              tools: [Eclipse, Vim, Sublime Text, maven, git]
              techenvironment: [Windows, Jetty, Tomcat, JBoss, REST, SASS, Jenkins, Sonar]
              environment: [agile, team]
              description: >
                A company owned project, filling a niche in the airline industry
              start: >
                Started project from a loose set of requirements, with no existing infrastructure
              responsiblefor:
                - Contributing to project via story completions
                - Supporting team members, providing reviews, bug fixes and feedback
                - Exploring solutions for robust scalability
              end: >
                Moved onto other projects before project came to completion
            - 
              name: Know Your Customer
              client: Wells Fargo
              time: [August 2013, October 2013]
              tools: [Eclipse, Vim, Sublime Text, svn, git]
              technologies: [Java, JSP, SOAP]
              techenvironment: [Windows, Ant, Tomcat, SASS, REST]
              environment: [agile, team, multiproject]
              description: >
                A large multi-end point application that hooks into Wells Fargo's
                various services, and integrates them for specific applications 
                to be used by internal Wells Fargo staff.
              start: >
                Onboarded before first sprint
              responsiblefor: 
                - Training our Junior member, by providing assistance, guidance and peer review
                - Contributing to project via story completions
                - Supporting team members, via reviews and bug fixes
                - Communicating directly with client, providing updates for resposibilities 
                  and resolution of technical issues
              end: >
                Left in the final iteration in a green status
    - 
      name: Terumo Cardiovascular
      positions:
        - 
          time: [June 2011, March 2013]
          unofficaltitle: Testing Software Engineer
          title: Engineering Intern
          projects:
            - 
              name: NewTexis
              time: [January 2012, March 2013]
              tools: [Visual Studio, Hg, Perforce]
              technologies: [C++ 03, Boost, C#, WinForms, Vector, Gryphon, DearbornGroup, .Net 3.5]
              techenvironment: [Real Time, CAN, Windows]
              environment: [team, independent]
              quickfacts:
                - Initiated an investigation into a significant technical problem
                  after finding evidence of a potentially erroneous existing software
                - Revealed and communicated a real and significant technical 
                  problem in a nondisruptive and prudent manner
                - Provided solutions to said problem
                - Improved upon old system by providing all old features and more, 
                  in a codebase 1/10th the size
              description: |
                Testing software that allowed reliable execution of testing scripts 
                that monitored, logged, and interfaced with a high speed CAN 
                environment. 
                
                Features included 
                  support for multiple hardware endpoints
                  real time domain level intepretation of data
                  customizable logging
                  playback
                  real time bridging between endpoints
                  real time manipulation of messages at both the domain level and raw data
                  configurable domain level schema
                  configurable real time simulation of domain devices
              start: |
                Existing testing software implemented in VB6 had fundamental 
                arcitecture flaws.

                After convincing management that the flaws existed and presenting 
                options to handle the situtation, it was decided we should replace 
                and improve upon the existing software
              responsiblefor:
                - Gathering and documenting requirements
                - Architecting and documenting the solution
                - Implementing service layer of solution
                - Testing service layer of solution
                - Leading and directing teammember's work
                - Providing support and reviews of teammember's work
                - Presenting and discussing progress with management
                - Ensuring quality and achieving targets
              end: >
                After main roles in project had been completed, stepped down to a 
                support role
            - 
              name: Meeting updated FDA regulations
              time: [June 2011, January 2012]
              technology: [C, C167]
              techenvironment: [Real Time, CAN, Windows]
              responsiblefor:
                - Reverse engineering design documents from generic pod code (>100k LOC)
                - Supporting other engineers in their documentation tasks
                - Creating tracability to existing upper level documentation
        - 
          time: [August 2010, January 2011]
          title: Engineering Intern
          tasks:
            - Supported other engineers in generating documentation
            - Improved old testing software, providing interfaces for new hardware 

  education:
    - 
      school: University of Michigan
      location: Dearborn, MI
      time: [September 2009, May 2014]
      degree: Bachelor of Science in Computer Science
      gpa: 3.0
      projects:
        - &PyLib
          name: Pythonic Static Analysis as Metadata 
          time: [January 2014, ]
          tools: [vim, git]
          Technology: [Python]
          environment: [self-driven, independent]
          description: |
            An independent study originally intended to use metadata to automate 
            property validation and reason about program correctness

            Project evolved into a metaframework supporting such frameworks
        - &Vim
          name: Benchmarking Vim
          time: [March 2014, ]
          tools: [vim, git, yaml]
          technology: [Python, Jquery, Handlebars, CSS]
          environment: [self-driven, independent, assignment]
          techenvironment: [Linux]
          description: |
            Is vim really more efficient than modern IDEs, such as eclipse?

            A benchmark compairson of vim for common programming tasks
        - 
          name: Lazy C Intepreter
          time: [Feburary 2014, ]
          tools: [vim, git, yaml]
          technology: [Python]
          techenvironment: [Linux]
          environment: [self-driven, independent, assignment]
          description: |
            A project for compiler design.
              Generates intermediate code for a significant subset of C
              Generates Lookup table from production rules
              Parses using LR
              Made it lazy as a personal challenge
        - 
          name: Android Physiognomy App
          time: [January 2013, September 2013]
          tools: [eclipse, git, maven]
          technology: [Java, OpenCV]
          techenvironment: [Linux, Android]
          environment: [team, assignment]
          description: |
            Senior Design Project
            A Facial recognition app for Android, using OpenCV, and for a real client
          responsiblefor:
            - Directing teammebers
            - Gathering requirements from a real client
            - Architecting and designing
            - Partitioning work
      
  extra:
    - 
      name: projects
      projects: 
        - 
          name: A Better Resume
          time: [April 2014, ]
          tools: [vim, git, yaml]
          technology: [Python, Jquery, Handlebars, CSS, Javascript, LaTeX]
          techenvironment: [Linux, Windows]
          environment: [self-driven, independent]
          description: |
            A small script to generate webpages and resumes from a static listing 
            of experience in yaml.

            Allows for the use of templates to create easily expandable and 
            summerizable resumes and CVs. Good design principals make it easy
            for the project to be extended.

            This document was created from this project.
        - 
          name: Personal Server
          time: [June 2013, ]
          tools: [vim, git]
          technology: [MySql, Ldap, Redmine, Jenkins, CSS, Javascript]
          techenvironment: [Linux, Apache, Tomcat, HTTPS/SSL, SSH, git]
          environment: [self-driven, independent]
          description: |
            On again, off again project.

            Occansional work on a Ubuntu Server, experiementing with setting up a build server using LDAP / single sign on.
            Hosts a few web development demos I've done in the past
        -
          name: Windows Tools
          environment: [self-driven, independent]
          description: |
            A small collection of Windows tools that I really love to have on hand

            Includes the best parts of linux:
              bugn - a virtual desktop manager created in autohotkey
              console2 - a better windows console
              gitbash - includes git and mingw shell
              ahk - for creating small utility scripts
          link: "https://github.com/PolakAllen/basic-tools-full-win"
        -
          name: toolbox
          environment: [self-driven, independent]
          description: |
            A small continually wip collection of scripting tools and personal 
            python libraries that I've written.
            
            Range from experiments in automated disambiguation, to simple practical 
            things like automatically publishing scripts to basic project setups
    - 
      name: organizations
      list:
        -
          name: Theta Tau
          time: [May 2011, ]
          positions: [Scribe, Vice Regent, Webmaster]
          description: A professional engineering fraternity
        -
          name: ACM
          time: [May 2012, ]
        -
          name: DCE
          time: [May 2011, ]
        -
          name: Game Club
          time: [2009, 2012]
    -
      name: activities
      list:
        -
          name: Self Assessment
          description: |
            In the interest of measuring and improving my own skill set and productivity, 
            I like to benchmark myself against various well known problems.

            These are some things that I've done in the past
          projects:
            - 
              name: googlecodejam
              time: [March 2014,]
              tools: [vim, git]
              technology: [Python]
              techenvironment: [Linux]
              environment: [self-driven, independent]
              link: "http://code.google.com/codejam/"
              description: |
                Practicing on old google jams. I'll be trying my luck for the first time this year.
            - 
              name: projecteuler
              time: [February 2014, March 2014]
              tools: [vim, git]
              technology: [Python]
              techenvironment: [Linux]
              environment: [self-driven, independent]
              link: "http://projecteuler.net/profile/00500005.png"
              description: |
                Traded work on these problems for practice in googlecodejam.
            - 
              name: codewars
              time: [February 2014, March 2014]
              technology: [Javascript]
              environment: [self-driven, independent]
              link: "http://www.codewars.com/users/PolakAllen"
              description: |
                No longer actively invovled.
            - 
              name: Lutz
              time: [February 2014]
              tools: [vim, git]
              technology: [Python]
              techenvironment: [Linux]
              environment: [self-driven, independent]
              link: "http://page.mi.fu-berlin.de/prechelt/Biblio/jccpprtTR.pdf"
              description: |
                Based off the excellently documented paper by Lutz Prechelt,
                I repeated the experiement within personally

                I had read the paper intially and was well exposed to the domain 
                problem prior to documenting my time. My work on the project was
                semi-regulated, having been done in a single continous block,
                though not completely free from distraction.
              results:
                105 Noncomment LOC (Upper quartile of python programs)
                12% Comment / LOC Ratio (Bottom quartile of python programs)
                3.5 Hours (Lower median quartile)
    -
      name: research
      list:
        - *Vim
        - *PyLib

